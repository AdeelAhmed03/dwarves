#! /usr/bin/python
# -*- python -*-
# -*- coding: utf-8 -*-
#   tuna - Application Tuning GUI
#   Copyright (C) 2009 Arnaldo Carvalho de Melo
#   Arnaldo Carvalho de Melo <acme@redhat.com>
#
#   This application is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; version 2.
#
#   This application is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   General Public License for more details.

import filecmp, os, posix, signal, sys

regtest_output_dir = "/media/tb/pahole/regtest/"
regtest_obj_dir = "/media/tb/debuginfo/usr/lib/debug/"
tools = {"pahole": { "dwarf": "--flat_arrays --show_private_classes --fixup_silly_bitfields" }}
#formats = ("ctf", "dwarf")
formats = ("ctf", )
len_debug_dir = len(regtest_obj_dir)
len_regtest_output_dir_before = len(regtest_output_dir) + len("before/")
verbose = 9
diff_filename = None

def diff_file(tool_filename):
	global diff_filename
	if not diff_filename:
		diff_filename = posix.tempnam()
	command = 'diff -up "%s" "%s" > %s' % \
		  (os.path.join(regtest_output_dir, "before", "dwarf", tool_filename),
		   os.path.join(regtest_output_dir, "after", "dwarf", tool_filename),
		   diff_filename)
	if verbose > 1:
		print command
	os.system(command)
	os.system("vim %s" % diff_filename)
	os.unlink(diff_filename)

def dir_has_no_diffs(dirname):
	return os.access(os.path.join(dirname, ".no_diffs"), os.F_OK)

def set_dir_has_no_diffs(dirname):
	f = file(os.path.join(dirname, ".no_diffs"), "w")
	f.close()

def reset_dir_has_no_diffs(dirname):
	os.unlink(os.path.join(dirname, ".no_diffs"))

def diff_dir(before, after, dir = None):
	if dir:
		before = os.path.join(before, dir)
		after = os.path.join(after, dir)
	print "\r%-130s" % before[len_regtest_output_dir_before:],
	sys.stdout.flush()
	diff = filecmp.dircmp(before, after)
	if not dir_has_no_diffs(after):
		diff_files = diff.diff_files
		if diff_files:
			diff_files.sort()
			print "\n  %s:\n	%s" % (before, diff_files)
			sys.stdout.flush()
			for f in diff_files:
				diff_file(os.path.join(before[len_regtest_output_dir_before:], f))
		else:
			set_dir_has_no_diffs(after)
	common_dirs = diff.common_dirs
	if not common_dirs:
		return
	common_dirs.sort()
	for dir in common_dirs:
		diff_dir(before, after, dir)

def do_diffs():
	before = os.path.join(regtest_output_dir, "before")
	after = os.path.join(regtest_output_dir, "after")
	diff_dir(before, after)

def do_tool(tool, before_after, format, dirname, fname,
	    prepend_obj_dir = False):
	if prepend_obj_dir:
		fname += ".debug"
		fixed_dirname = dirname
	else:
		fixed_dirname = dirname[len_debug_dir:]
	tool_output_dir = os.path.join(regtest_output_dir,
				       before_after, tool, format,
				       fixed_dirname)
	obj_path = os.path.join(dirname, fname)
	if prepend_obj_dir:
		obj_path = os.path.join(regtest_obj_dir, obj_path)
	if os.path.islink(obj_path) or os.path.isdir(obj_path):
		return
	try:
		os.makedirs(tool_output_dir)
	except:
		pass
	if dir_has_no_diffs(tool_output_dir):
		reset_dir_has_no_diffs(tool_output_dir)
	output_file = os.path.join(tool_output_dir, fname[:-6])
	if tools[tool].has_key(format):
		options = tools[tool][format]
	else:
		options = ""
	command = '%s -F %s %s %s > "%s"' % (tool, format, options,
					     obj_path, output_file)
	if verbose > 1:
		print command
		sys.stdout.flush()
	elif verbose > 0:
		print "%s: %s" % (format,
				  os.path.join(fixed_dirname, fname[:-6]))
	os.system(command)

def do_tool_on_files(arg, dirname, fnames):
	if dirname.find("/.") >= 0:
		return
	tool, before_after = arg
	for fname in fnames:
		if fname[-6:] != ".debug":
			continue

		for format in formats:
			do_tool(tool, before_after, format, dirname, fname)

def do_tools(before_after):
	for tool in tools.keys():
		os.path.walk(regtest_obj_dir, do_tool_on_files, (tool, before_after))

def do_ctf(dirname, fname, prepend_obj_dir = False):
	if prepend_obj_dir:
		fname += ".debug"
		fixed_dirname = dirname
	else:
		fixed_dirname = dirname[len_debug_dir:]
	obj_path = os.path.join(dirname, fname)
	if prepend_obj_dir:
		obj_path = os.path.join(regtest_obj_dir, obj_path)

	if os.path.islink(obj_path) or os.path.isdir(obj_path):
		return
	command = 'pahole -Z "%s" 2> /dev/null' % obj_path
	if verbose > 1:
		print command
	elif verbose > 0:
		print os.path.join(fixed_dirname, fname[:-6])
	os.system(command)

def do_ctf_on_files(arg, dirname, fnames):
	if dirname.find("/.") >= 0:
		return
	for fname in fnames:
		if fname[-6:] != ".debug":
			continue

		do_ctf(dirname, fname)

def do_ctfs():
	os.path.walk(regtest_obj_dir, do_ctf_on_files, None)

def sig_exit(sig_number, stack_frame):
	sys.exit(1)

def main(argv):
	for sig in (signal.SIGHUP, signal.SIGINT, signal.SIGTERM):
		signal.signal(sig, sig_exit)

	try:
		if argv[1] in ('before', 'after'):
			if len(argv) > 3:
				dirname = argv[2]
				for fname in argv[3:]:
					for tool in tools.keys():
						for format in formats:
							do_tool(tool, argv[1], format, dirname, fname, True)
			else:
				do_tools(argv[1])
		elif argv[1] == 'diff':
			if len(argv) > 3:
				dirname = argv[2]
				for fname in argv[3:]:
					diff_file("%s.%s.c" % (os.path.join(dirname, fname)))
			else:
				do_diffs()
		elif argv[1] == 'ctf':
			if len(argv) > 3:
				dirname = argv[2]
				for fname in argv[3:]:
					do_ctf(dirname, fname, True)
			else:
				do_ctfs()
	except IOError:
		pass

if __name__ == '__main__':
    main(sys.argv)
